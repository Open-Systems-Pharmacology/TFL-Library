% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot-grid.R
\name{PlotGridConfiguration}
\alias{PlotGridConfiguration}
\title{Class for creating a plot grid}
\value{
A \code{PlotGridConfiguration} object.
}
\description{
An \code{R6} class defining the configuration for \code{{patchwork}} plot grid used to
create a grid of plots from \code{{tlf}}. It holds values for all relevant
plot properties.
}
\section{Customizing}{
You can change the default values present in public fields.

For example, if you want to specify a new position for tags, you will have to
do the following:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{myPlotGridConfiguration <- PlotGridConfiguration$new()
myPlotGridConfiguration$tagPosition <- TagPositions$right
}\if{html}{\out{</div>}}

For more, see examples.
}

\section{Specifying fonts}{
A font is a particular set of glyphs (character shapes), differentiated from
other fonts in the same family by additional properties such as stroke
weight, slant, relative width, etc.

A font face (aka typeface) is the design of lettering, characterized by
variations in size, weight (e.g. bold), slope (e.g. italic), width (e.g.
condensed), and so on. The available font faces can seen using
\code{FontFaces} list.

A font family is a grouping of fonts defined by shared design styles.

The available font families will depend on which fonts have been installed on
your computer. This information can be extracted by running the following
code:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# install.packages("systemfonts")
library(systemfonts)
system_fonts()
}\if{html}{\out{</div>}}
}

\section{Saving plot}{
By default, the plots will be shown in plot pane of your IDE, but the plots
can also be saved to a file using the \code{ggplot2::ggsave()} function.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{myPlot <- plotGrid(...)
ggplot2::ggsave(filename = "plot_1.png", plot = myPlot)
}\if{html}{\out{</div>}}
}

\examples{

library(tlf)

# create a list of plots
ls_plots <- list(
  # first plot
  plotBoxWhisker(mtcars,
    dataMapping = BoxWhiskerDataMapping$new(x = "am", y = "wt"), outliers = FALSE
  ),
  # second plot
  plotBoxWhisker(ToothGrowth,
    dataMapping = BoxWhiskerDataMapping$new(x = "supp", y = "len")
  )
)

plotGridObj <- PlotGridConfiguration$new(ls_plots)

# specify further customizations for the plot grid
plotGridObj$title <- "my combined plot"
plotGridObj$subtitle <- "something clever"
plotGridObj$caption <- "my sources"
plotGridObj$nColumns <- 2L
plotGridObj$tagLevels <- "A"
plotGridObj$tagPrefix <- "Plot ("
plotGridObj$tagSuffix <- ")"
plotGridObj$tagColor <- "blue"
plotGridObj$tagSize <- 15
plotGridObj$tagAngle <- 45
plotGridObj$tagPosition <- TagPositions$top
plotGridObj$titleHorizontalJustification <- HorizontalJustification$middle
plotGridObj$subtitleHorizontalJustification <- HorizontalJustification$middle

# print the object to see its properties
plotGridObj


## ------------------------------------------------
## Method `PlotGridConfiguration$addPlots`
## ------------------------------------------------


library(ggplot2)

myPlotGrid <- PlotGridConfiguration$new()

# You can add a single ggplot object
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
myPlotGrid$addPlots(p)

# Or you can also pass a list
myPlotGrid$addPlots(list("p1" = ggplot(), "p2" = ggplot()))

# Since we added three plots, the `plotList` field should
# now be a list of length `3`
length(myPlotGrid$plotList)

}
\section{Super class}{
\code{\link[ospsuite.utils:Printable]{ospsuite.utils::Printable}} -> \code{PlotGridConfiguration}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{plotList}}{A list containing \code{ggplot} objects.}

\item{\code{title, subtitle, caption}}{Text strings to use for the various plot
annotations, where plot refers to the grid of plots as a whole.}

\item{\code{titleColor, titleSize, titleFontFace, titleFontFamily, titleHorizontalJustification, titleVerticalJustification, titleAngle}}{Aesthetic properties for the plot title.}

\item{\code{subtitleColor, subtitleSize, subtitleFontFace, subtitleFontFamily, subtitleHorizontalJustification, subtitleVerticalJustification, subtitleAngle}}{Aesthetic properties for the plot subtitle.}

\item{\code{captionColor, captionSize, captionFontFace, captionFontFamily, captionHorizontalJustification, captionVerticalJustification, captionAngle}}{Aesthetic properties for the plot caption.}

\item{\code{tagLevels}}{A character vector defining the enumeration format to use
at each level. Possible values are \code{'a'} for lowercase letters, \code{'A'} for
uppercase letters, \code{'1'} for numbers, \code{'i'} for lowercase Roman numerals, and
\code{'I'} for uppercase Roman numerals. It can also be a list containing
character vectors defining arbitrary tag sequences. If any element in the
list is a scalar and one of \code{'a'}, \code{'A'}, \code{'1'}, \verb{'i}, or \code{'I'}, this level
will be expanded to the expected sequence.}

\item{\code{tagPrefix, tagSuffix}}{Strings that should appear before or after the
tag.}

\item{\code{tagSeparator}}{A separator between different tag levels.}

\item{\code{tagPosition}}{Position of the tag for an individual plot with respect to
that plot. Default is topleft. For all available options, see
\code{TagPositions}.}

\item{\code{tagColor, tagSize, tagFontFamily, tagFontFace, tagHorizontalJustification, tagVerticalJustification, tagAngle, tagLineHeight, tagMargin}}{Aesthetic properties of individual plot tag text.
For more detailed description of each aesthetic property, see docs for
\link[ggplot2:element]{element_text()}.}

\item{\code{nColumns, nRows}}{The dimensions of the grid to create - if both are
\code{NULL} it will use the same logic as \link[ggplot2:facet_wrap]{facet_wrap()} to
set the dimensions}

\item{\code{byRow}}{Analogous to \code{byrow} in \link[base:matrix]{matrix()}. If \code{FALSE} the
plots will be filled in in column-major order.}

\item{\code{widths, heights}}{The relative widths and heights of each column and row
in the grid. Will get repeated to match the dimensions of the grid.}

\item{\code{guides}}{A string specifying how guides should be treated in the layout.
\code{'collect'} will collect guides below to the given nesting level, removing
duplicates. \code{'keep'} will stop collection at this level and let guides be
placed alongside their plot. \code{auto} will allow guides to be collected if a
upper level tries, but place them alongside the plot if not. If you modify
default guide "position" with \link[ggplot2:theme]{theme(legend.position=...)}
while also collecting guides you must apply that change to the overall
patchwork.}

\item{\code{design}}{Specification of the location of areas in the layout. Can
either be specified as a text string or by concatenating calls to \code{\link[=area]{area()}}
together. See the examples in \link[patchwork:wrap_plots]{wrap_plots()} for
further information on use.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{title, subtitle, caption}}{Text strings to use for the various plot
annotations, where plot refers to the grid of plots as a whole.}

\item{\code{titleColor, titleSize, titleFontFace, titleFontFamily, titleHorizontalJustification, titleVerticalJustification, titleAngle}}{Aesthetic properties for the plot title.}

\item{\code{subtitleColor, subtitleSize, subtitleFontFace, subtitleFontFamily, subtitleHorizontalJustification, subtitleVerticalJustification, subtitleAngle}}{Aesthetic properties for the plot subtitle.}

\item{\code{captionColor, captionSize, captionFontFace, captionFontFamily, captionHorizontalJustification, captionVerticalJustification, captionAngle}}{Aesthetic properties for the plot caption.}

\item{\code{tagPrefix, tagSuffix}}{Strings that should appear before or after the
tag.}

\item{\code{tagColor, tagSize, tagFontFamily, tagFontFace, tagHorizontalJustification, tagVerticalJustification, tagAngle, tagLineHeight, tagMargin}}{Aesthetic properties of individual plot tag text.
For more detailed description of each aesthetic property, see docs for
\link[ggplot2:element]{element_text()}.}

\item{\code{nColumns, nRows}}{The dimensions of the grid to create - if both are
\code{NULL} it will use the same logic as \link[ggplot2:facet_wrap]{facet_wrap()} to
set the dimensions}

\item{\code{widths, heights}}{The relative widths and heights of each column and row
in the grid. Will get repeated to match the dimensions of the grid.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PlotGridConfiguration-new}{\code{PlotGridConfiguration$new()}}
\item \href{#method-PlotGridConfiguration-addPlots}{\code{PlotGridConfiguration$addPlots()}}
\item \href{#method-PlotGridConfiguration-print}{\code{PlotGridConfiguration$print()}}
\item \href{#method-PlotGridConfiguration-clone}{\code{PlotGridConfiguration$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PlotGridConfiguration-new"></a>}}
\if{latex}{\out{\hypertarget{method-PlotGridConfiguration-new}{}}}
\subsection{Method \code{new()}}{
Create an instance of \code{PlotGridConfiguration} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PlotGridConfiguration$new(plotList = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{plotList}}{A list containing \code{ggplot} objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{PlotGridConfiguration} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PlotGridConfiguration-addPlots"></a>}}
\if{latex}{\out{\hypertarget{method-PlotGridConfiguration-addPlots}{}}}
\subsection{Method \code{addPlots()}}{
Add a plot object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PlotGridConfiguration$addPlots(plots = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{plots}}{A single or a list containing \code{ggplot} object(s).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{PlotGridConfiguration} object with \verb{$plotList} field updated to
store entered plots.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
library(ggplot2)

myPlotGrid <- PlotGridConfiguration$new()

# You can add a single ggplot object
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
myPlotGrid$addPlots(p)

# Or you can also pass a list
myPlotGrid$addPlots(list("p1" = ggplot(), "p2" = ggplot()))

# Since we added three plots, the `plotList` field should
# now be a list of length `3`
length(myPlotGrid$plotList)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PlotGridConfiguration-print"></a>}}
\if{latex}{\out{\hypertarget{method-PlotGridConfiguration-print}{}}}
\subsection{Method \code{print()}}{
Print the object to the console.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PlotGridConfiguration$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PlotGridConfiguration-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PlotGridConfiguration-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PlotGridConfiguration$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
